// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SubmitTranslationResponse submit translation response
//
// swagger:model SubmitTranslationResponse
type SubmitTranslationResponse struct {

	// error
	Error string `json:"error,omitempty"`

	// res code
	// Enum: [0 1 2 4]
	ResCode int64 `json:"resCode,omitempty"`

	// translation Id
	TranslationID string `json:"translationId,omitempty"`
}

// Validate validates this submit translation response
func (m *SubmitTranslationResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateResCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var submitTranslationResponseTypeResCodePropEnum []interface{}

func init() {
	var res []int64
	if err := json.Unmarshal([]byte(`[0,1,2,4]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		submitTranslationResponseTypeResCodePropEnum = append(submitTranslationResponseTypeResCodePropEnum, v)
	}
}

// prop value enum
func (m *SubmitTranslationResponse) validateResCodeEnum(path, location string, value int64) error {
	if err := validate.Enum(path, location, value, submitTranslationResponseTypeResCodePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SubmitTranslationResponse) validateResCode(formats strfmt.Registry) error {

	if swag.IsZero(m.ResCode) { // not required
		return nil
	}

	// value enum
	if err := m.validateResCodeEnum("resCode", "body", m.ResCode); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SubmitTranslationResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SubmitTranslationResponse) UnmarshalBinary(b []byte) error {
	var res SubmitTranslationResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
