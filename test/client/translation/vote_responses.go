// Code generated by go-swagger; DO NOT EDIT.

package translation

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/idena-network/idena-translation/test/models"
)

// VoteReader is a Reader for the Vote structure.
type VoteReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *VoteReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewVoteOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewVoteBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewVoteInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewVoteOK creates a VoteOK with default headers values
func NewVoteOK() *VoteOK {
	return &VoteOK{}
}

/*VoteOK handles this case with default header values.

OK
*/
type VoteOK struct {
	Payload *models.VoteResponse
}

func (o *VoteOK) Error() string {
	return fmt.Sprintf("[POST /vote][%d] voteOK  %+v", 200, o.Payload)
}

func (o *VoteOK) GetPayload() *models.VoteResponse {
	return o.Payload
}

func (o *VoteOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.VoteResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewVoteBadRequest creates a VoteBadRequest with default headers values
func NewVoteBadRequest() *VoteBadRequest {
	return &VoteBadRequest{}
}

/*VoteBadRequest handles this case with default header values.

Bad Request
*/
type VoteBadRequest struct {
	Payload *models.ErrorResponse
}

func (o *VoteBadRequest) Error() string {
	return fmt.Sprintf("[POST /vote][%d] voteBadRequest  %+v", 400, o.Payload)
}

func (o *VoteBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *VoteBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewVoteInternalServerError creates a VoteInternalServerError with default headers values
func NewVoteInternalServerError() *VoteInternalServerError {
	return &VoteInternalServerError{}
}

/*VoteInternalServerError handles this case with default header values.

Internal Server Error
*/
type VoteInternalServerError struct {
	Payload *models.ErrorResponse
}

func (o *VoteInternalServerError) Error() string {
	return fmt.Sprintf("[POST /vote][%d] voteInternalServerError  %+v", 500, o.Payload)
}

func (o *VoteInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *VoteInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
