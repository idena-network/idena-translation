// Code generated by go-swagger; DO NOT EDIT.

package translation

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/idena-network/idena-translation/test/models"
)

// SubmitTranslationReader is a Reader for the SubmitTranslation structure.
type SubmitTranslationReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SubmitTranslationReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSubmitTranslationOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewSubmitTranslationBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewSubmitTranslationInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewSubmitTranslationOK creates a SubmitTranslationOK with default headers values
func NewSubmitTranslationOK() *SubmitTranslationOK {
	return &SubmitTranslationOK{}
}

/*SubmitTranslationOK handles this case with default header values.

OK
*/
type SubmitTranslationOK struct {
	Payload *models.SubmitTranslationResponse
}

func (o *SubmitTranslationOK) Error() string {
	return fmt.Sprintf("[POST /translation][%d] submitTranslationOK  %+v", 200, o.Payload)
}

func (o *SubmitTranslationOK) GetPayload() *models.SubmitTranslationResponse {
	return o.Payload
}

func (o *SubmitTranslationOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SubmitTranslationResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSubmitTranslationBadRequest creates a SubmitTranslationBadRequest with default headers values
func NewSubmitTranslationBadRequest() *SubmitTranslationBadRequest {
	return &SubmitTranslationBadRequest{}
}

/*SubmitTranslationBadRequest handles this case with default header values.

Bad Request
*/
type SubmitTranslationBadRequest struct {
	Payload *models.ErrorResponse
}

func (o *SubmitTranslationBadRequest) Error() string {
	return fmt.Sprintf("[POST /translation][%d] submitTranslationBadRequest  %+v", 400, o.Payload)
}

func (o *SubmitTranslationBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *SubmitTranslationBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSubmitTranslationInternalServerError creates a SubmitTranslationInternalServerError with default headers values
func NewSubmitTranslationInternalServerError() *SubmitTranslationInternalServerError {
	return &SubmitTranslationInternalServerError{}
}

/*SubmitTranslationInternalServerError handles this case with default header values.

Internal Server Error
*/
type SubmitTranslationInternalServerError struct {
	Payload *models.ErrorResponse
}

func (o *SubmitTranslationInternalServerError) Error() string {
	return fmt.Sprintf("[POST /translation][%d] submitTranslationInternalServerError  %+v", 500, o.Payload)
}

func (o *SubmitTranslationInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *SubmitTranslationInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
